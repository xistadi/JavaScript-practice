JavaScript в браузерном окружении:
window: 
1) DOM : 
	a) document
	b) ...
2) BOM :
	a) navigator
	b) screen
	c) location
	d) frames
	e) hisotry
	f) XMLHttpRequest
3) JavaScript : 
	a) Object
	b) Array
	c) Function
	d) ...

------------------------------------------------------------------------

window - это глобальный объект для JavaScript-кода, окно браузера и 
располагает методами для управления им.

function sayHi() {
  alert("Hello");
}
// глобальные функции доступны как методы глобального объекта:
window.sayHi();
alert(window.innerHeight); // внутренняя высота окна браузера

------------------------------------------------------------------------

Document Object Model, сокращённо DOM – объектная модель документа, 
которая представляет все содержимое страницы в виде объектов, которые 
можно менять.
Объект document – основная «входная точка». С его помощью мы можем 
что-то создавать или менять на странице.

// заменим цвет фона на красный,
document.body.style.background = "red";
// а через секунду вернём как было
setTimeout(() => document.body.style.background = "", 1000);

------------------------------------------------------------------------

Объектная модель браузера (Browser Object Model, BOM) – это 
дополнительные объекты, предоставляемые браузером (окружением), 
чтобы работать со всем, кроме документа.

alert(location.href); // показывает текущий URL
if (confirm("Перейти на Wikipedia?")) {
  location.href = "https://wikipedia.org"; // перенаправляет браузер на другой URL
}

------------------------------------------------------------------------

DOM-дерево

document.body.style.background = 'red'; // сделать фон красным
setTimeout(() => document.body.style.background = '', 3000); // вернуть назад

HTML/XML документы представлены в браузере в виде DOM-дерева.

    Теги становятся узлами-элементами и формируют структуру документа.
    Текст становится текстовыми узлами.
    … и т.д. Всё, что записано в HTML, есть и в DOM-дереве, даже комментарии.

------------------------------------------------------------------------

Навигация по DOM-элементам

Для всех узлов: parentNode, childNodes, firstChild, lastChild, 
previousSibling, nextSibling.
Только для узлов-элементов: parentElement, children, 
firstElementChild, lastElementChild, previousElementSibling, 
nextElementSibling.

------------------------------------------------------------------------

Поиск: getElement*, querySelector*

Есть 6 основных методов поиска элементов в DOM:
			Ищет по	Внутри элемента Возвращает живую коллекцию
querySelector 		CSS-selector 	✔ 		-
querySelectorAll 	CSS-selector 	✔ 		-
getElementById 	id 		- 		-
getElementsByName 	name 		- 		✔
getElementsByTagName 	tag or '*' 	✔ 		✔
getElementsByClassName class 		✔ 		✔

метод elem.matches(css), который проверяет, удовлетворяет ли элемент CSS-селектору.
Метод elem.closest(css) ищет ближайшего по иерархии предка, соответствующему 
данному CSS-селектору. Сам элемент также включён в поиск.

метод, который проверяет наличие отношений между предком и потомком:
elemA.contains(elemB) вернёт true, если elemB находится внутри elemA (elemB потомок elemA) 
или когда elemA==elemB.

------------------------------------------------------------------------

Свойства узлов: тип, тег и содержимое

nodeType
Свойство nodeType позволяет узнать тип DOM-узла. Его значение – числовое: 
1 для элементов,3 для текстовых узлов, и т.д. Только для чтения.
nodeName/tagName
Для элементов это свойство возвращает название тега (записывается в верхнем регистре, 
за исключением XML-режима). Для узлов-неэлементов nodeName описывает, что это за узел.
 Только для чтения.
innerHTML
Внутреннее HTML-содержимое узла-элемента. Можно изменять.
outerHTML
Полный HTML узла-элемента. Запись в elem.outerHTML не меняет elem. Вместо этого она 
заменяет его во внешнем контексте.
nodeValue/data
Содержимое узла-неэлемента (текст, комментарий). Эти свойства практически одинаковые, 
обычно мы используем data. Можно изменять.
textContent
Текст внутри элемента: HTML за вычетом всех <тегов>. Запись в него помещает текст в 
элемент, при этом все специальные символы и теги интерпретируются как текст. 
Можно использовать для защиты от вставки произвольного HTML кода.
hidden
Когда значение установлено в true, делает то же самое, что и CSS display:none.

В зависимости от своего класса DOM-узлы имеют и другие свойства. Например у 
элементов <input> (HTMLInputElement) есть свойства value, type, у элементов 
<a> (HTMLAnchorElement) есть href и т.д. Большинство стандартных HTML-атрибутов 
имеют соответствующие свойства DOM.

------------------------------------------------------------------------

Атрибуты и свойства

Атрибуты – это то, что написано в HTML.
Свойства – это то, что находится в DOM-объектах.

Методы для работы с атрибутами:
elem.hasAttribute(name) – проверить на наличие.
elem.getAttribute(name) – получить значение.
elem.setAttribute(name, value) – установить значение.
elem.removeAttribute(name) – удалить атрибут.
elem.attributes – это коллекция всех атрибутов.

------------------------------------------------------------------------

Изменение документа

Методы для создания узлов:
    document.createElement(tag) – создаёт элемент с заданным тегом,
    document.createTextNode(value) – создаёт текстовый узел (редко используется),
    elem.cloneNode(deep) – клонирует элемент, если deep==true, то со всеми дочерними элементами.

Вставка и удаление:
    node.append(...nodes or strings) – вставляет в node в конец,
    node.prepend(...nodes or strings) – вставляет в node в начало,
    node.before(...nodes or strings) – вставляет прямо перед node,
    node.after(...nodes or strings) – вставляет сразу после node,
    node.replaceWith(...nodes or strings) – заменяет node.
    node.remove() – удаляет node.

Устаревшие методы:
    parent.appendChild(node)
    parent.insertBefore(node, nextSibling)
    parent.removeChild(node)
    parent.replaceChild(newElem, node)


Если нужно вставить фрагмент HTML, то elem.insertAdjacentHTML(where, html) вставляет в зависимости от where:
    "beforebegin" – вставляет html прямо перед elem,
    "afterbegin" – вставляет html в elem в начало,
    "beforeend" – вставляет html в elem в конец,
    "afterend" – вставляет html сразу после elem.

Чтобы добавить HTML на страницу до завершения её загрузки:
    document.write(html)

------------------------------------------------------------------------

Стили и классы

Для управления классами существуют два DOM-свойства:
    className – строковое значение, удобно для управления всем набором классов.
    classList – объект с методами add/remove/toggle/contains, удобно для управления отдельными классами.

Чтобы изменить стили:
    Свойство style является объектом со стилями в формате camelCase. Чтение и запись в него работают так же, как изменение соответствующих свойств в атрибуте "style"
    Свойство style.cssText соответствует всему атрибуту "style", полной строке стилей.

Для чтения окончательных стилей (с учётом всех классов, после применения CSS и вычисления окончательных значений) используется:
    Метод getComputedStyle(elem, [pseudo]) возвращает объект, похожий по формату на style. Только для чтения.

------------------------------------------------------------------------

Размеры и прокрутка элементов

ffsetParent – ближайший CSS-позиционированный родитель или ближайший td, th, table, body.
offsetLeft/offsetTop – позиция в пикселях верхнего левого угла относительно offsetParent.
offsetWidth/offsetHeight – «внешняя» ширина/высота элемента, включая рамки.
clientLeft/clientTop – расстояние от верхнего левого внешнего угла до внутренного. Для операционных систем с ориентацией слева-направо эти свойства равны ширинам левой/верхней рамки. Если язык ОС таков, что ориентация справа налево, так что вертикальная полоса прокрутки находится не справа, а слева, то clientLeft включает в своё значение её ширину.
clientWidth/clientHeight – ширина/высота содержимого вместе с внутренними отступами padding, но без полосы прокрутки.
scrollWidth/scrollHeight – ширины/высота содержимого, аналогично clientWidth/Height, но учитывают прокрученную, невидимую область элемента.
scrollLeft/scrollTop – ширина/высота прокрученной сверху части элемента, считается от верхнего левого угла.

Все свойства доступны только для чтения, кроме scrollLeft/scrollTop, изменение которых заставляет браузер прокручивать элемент.

------------------------------------------------------------------------

Размеры и прокрутка окна

Ширина/высота видимой части документа (ширина/высота области содержимого): document.documentElement.clientWidth/Height

Ширина/высота всего документа с прокрученной частью:
let scrollHeight = Math.max(
document.body.scrollHeight, document.documentElement.scrollHeight,
document.body.offsetHeight, document.documentElement.offsetHeight,
document.body.clientHeight, document.documentElement.clientHeight
);

Прокрутка:
Прокрутку окна можно получить так: window.pageYOffset/pageXOffset.

Изменить текущую прокрутку:
window.scrollTo(pageX,pageY) – абсолютные координаты,
window.scrollBy(x,y) – прокрутка относительно текущего места,
elem.scrollIntoView(top) – прокрутить страницу так, чтобы сделать elem видимым (выровнять относительно верхней/нижней части окна).

------------------------------------------------------------------------

Координаты

Относительно окна браузера – elem.getBoundingClientRect().
Относительно документа – elem.getBoundingClientRect() плюс текущая прокрутка страницы.

Координаты в контексте окна подходят для использования с position:fixed, а координаты относительно документа – для использования с position:absolute.

------------------------------------------------------------------------

Введение в браузерные события

Есть три способа назначения обработчиков событий:
Атрибут HTML: onclick="...".
DOM-свойство: elem.onclick = function.
Специальные методы: elem.addEventListener(event, handler[, phase]) для добавления, removeEventListener для удаления.

------------------------------------------------------------------------

Действия браузера по умолчанию

Действий браузера по умолчанию достаточно много:
mousedown – начинает выделять текст (если двигать мышкой).
click на <input type="checkbox"> – ставит или убирает галочку в input.
submit – при нажатии на <input type="submit"> или при нажатии клавиши Enter в форме данные отправляются на сервер.
keydown – при нажатии клавиши в поле ввода появляется символ.
contextmenu – при правом клике показывается контекстное меню браузера.
…и многие другие…

Чтобы отменить действие браузера по умолчанию, используйте event.preventDefault() 
или return false. Второй метод работает, только если обработчик назначен через on<событие>.

------------------------------------------------------------------------

Основы событий мыши

Кнопка: which.
Клавиши-модификаторы (true если нажаты): altKey, ctrlKey, shiftKey и metaKey (Mac).
    Если вы планируете обработать Ctrl, то не забудьте, что пользователи Mac обычно используют Cmd, поэтому лучше проверить if (e.metaKey || e.ctrlKey).
Координаты относительно окна: clientX/clientY.
Координаты относительно документа: pageX/pageY.

------------------------------------------------------------------------

Свойства и методы формы

Свойства для навигации по формам:
document.forms
    Форма доступна через document.forms[name/index].
form.elements
    Элементы формы доступны через form.elements[name/index], или можно просто использовать form[name/index]. Свойство elements также работает для <fieldset>.
element.form
    Элементы хранят ссылку на свою форму в свойстве form.

Значения элементов формы доступны через input.value, textarea.value, select.value и т.д. либо input.checked для чекбоксов и переключателей.

Для элемента <select> мы также можем получить индекс выбранного пункта через select.selectedIndex, либо используя коллекцию пунктов select.options

------------------------------------------------------------------------

События: change, input, cut, copy, paste

Событие 	    Описание 	                                Особенности
change 	        Значение было изменено. 	                Для текстовых полей срабатывает при потере фокуса.
input 	        Срабатывает при каждом изменении значения. 	Запускается немедленно, в отличие от change.
cut/copy/paste 	Действия по вырезанию/копированию/вставке. 	Действие можно предотвратить. Свойство event.clipboardData предоставляет доступ на чтение/запись в буфер обмена…

------------------------------------------------------------------------

События загрузки страницы:

DOMContentLoaded генерируется на document, когда DOM готов. Мы можем применить JavaScript к элементам на данном этапе.
        Скрипты, вроде <script>...</script> или <script src="..."></script> блокируют DOMContentLoaded, браузер ждёт, пока они выполнятся.
        Изображения и другие ресурсы тоже всё ещё могут продолжать загружаться.
Событие load на window генерируется, когда страница и все ресурсы загружены. Мы редко его используем, потому что обычно нет нужды ждать так долго.
Событие beforeunload на window генерируется, когда пользователь покидает страницу. Если мы отменим событие, браузер спросит, на самом ли деле пользователь хочет уйти (например, у нас есть несохранённые изменения).
Событие unload на window генерируется, когда пользователь окончательно уходит, в обработчике мы можем делать только простые вещи, которые ни о чём не спрашивают пользователя и не заставляют его ждать. Из-за этих ограничений оно редко используется. Мы можем послать сетевой запрос с помощью navigator.sendBeacon.
document.readyState – текущее состояние документа, изменения можно отследить с помощью события readystatechange:
        loading – документ грузится.
        interactive – документ прочитан, происходит примерно в то же время, что и DOMContentLoaded, но до него.
        complete – документ и ресурсы загружены, происходит примерно в то же время, что и window.onload, но до него.

------------------------------------------------------------------------

