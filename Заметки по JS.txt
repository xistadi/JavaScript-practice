// Переменные 
let message; // var or let вар старая херь
// имена _$a-z
// ; не забывай ебло


Константы
const myBirthday = '18.04.1982';
// Константы в верхнем регистре
/*Обычно мы используем буквы в верхнем регистре для констант, 
которые «жёстко закодированы». Или, другими словами, когда 
значение известно до выполнения скрипта и записывается 
непосредственно в код.*/
const age = someCode(BIRTHDAY);
const COLOR_RED = "#F00";


Типы данных

Число
let n = 123;
n = 12.345;
Числовой тип данных (number) представляет как целочисленные значения, 
так и числа с плавающей точкой.
Кроме обычных чисел, существуют так называемые «специальные числовые 
значения», которые относятся к этому типу данных: Infinity, -Infinity 
и NaN.
Infinity представляет собой математическую бесконечность ∞. 
Это особое значение, которое больше любого числа.
NaN означает вычислительную ошибку. Это результат неправильной или 
неопределённой математической операции

BigInt
// символ "n" в конце означает, что это BigInt
const bigInt = 1234567890123456789012345678901234567890n;
Тип BigInt был добавлен в JavaScript, чтобы дать возможность работать
 с целыми числами произвольной длины.

Строка
let str = "Привет";
let str2 = 'Одинарные кавычки тоже подойдут';
let phrase = `Обратные кавычки позволяют встраивать переменные ${str}`;

Булевый (логический) тип
let nameFieldChecked = true; // да, поле отмечено
let ageFieldChecked = false; // нет, поле не отмечено

Значение «null»
let age = null;

Значение «undefined»
Специальное значение undefined также стоит особняком. 
Оно формирует тип из самого себя так же, как и null.
Оно означает, что «значение не было присвоено».

Объекты и символы
object (объект)  для более сложных структур данных.
symbol (символ) для уникальных идентификаторов.

Оператор typeof
Оператор typeof возвращает тип аргумента. Это полезно, 
когда мы хотим обрабатывать значения различных типов по-разному 
или просто хотим сделать проверку.

----------------------------------------------------------------------
Взаимодействие: alert, prompt, confirm

alert("Hello"); - небольшое окно с сообщением называется модальным окном

prompt(title, [default]); - модальное окно с текстом, 
полем для ввода текста и кнопками OK/Отмена.

let age = prompt('Сколько тебе лет?');
alert(`Тебе ${age} лет!`); 

confirm
confirm(question);
Функция confirm отображает модальное окно с текстом вопроса 
question и двумя кнопками: OK и Отмена.

let isBoss = confirm("Ты здесь главный?");
alert( isBoss ); // true, если нажата OK
----------------------------------------------------------------------
Преобразование типов

Строковое преобразование
String(value)

Численное преобразование
Number(value)

Логическое преобразование
Boolean(value)
----------------------------------------------------------------------
Условное ветвление: if, '?'

let year = prompt('В каком году была опубликована 
спецификация ECMAScript-2015?', '');
if (year == 2015) alert( 'Вы правы!' );
// or
if (year == 2015) {
  alert( "Правильно!" );
  alert( "Вы такой умный!" );
}
// else 
if (year == 2015) {
  alert( 'Да вы знаток!' );
} else {
  alert( 'А вот и неправильно!' ); // любое значение, кроме 2015
}
// else if
if (year < 2015) {
  alert( 'Это слишком рано...' );
} else if (year > 2015) {
  alert( 'Это поздновато' );
} else {
  alert( 'Верно!' );
}

Условный оператор „?“
let result = условие ? значение1 : значение2;
Сначала вычисляется условие: если оно истинно, тогда 
возвращается значение1, в противном случае – значение2.

Несколько операторов „?“
let age = prompt('Возраст?', 18);
let message = (age < 3) ? 'Здравствуй, малыш!' :
  (age < 18) ? 'Привет!' :
  (age < 100) ? 'Здравствуйте!' :
  'Какой необычный возраст!';
----------------------------------------------------------------------
Логические операторы

|| (ИЛИ), && (И) и ! (НЕ).

ИЛИ «||» находит первое истинное значение
result = value1 || value2 || value3;

И «&&» находит первое ложное значение
result = value1 && value2 && value3;
----------------------------------------------------------------------
Оператор объединения с null '??'
Результат выражения a ?? b будет следующим:

a, если значение a определено,
b, если значение a не определено.
----------------------------------------------------------------------
Циклы while и for
while (condition) {
  // код
  // также называемый "телом цикла"
}


do {
  // тело цикла
} while (condition);
Цикл сначала выполнит тело, а затем проверит условие condition,
 и пока его значение равно true, он будет выполняться снова и снова.

Цикл «for»
for (начало; условие; шаг) {
  // ... тело цикла ...
}

Прерывание цикла: «break»
Переход к следующей итерации: continue
----------------------------------------------------------------------
Конструкция "switch"
switch(x) {
  case 'value1':  // if (x === 'value1')
    ...
    [break]

  case 'value2':  // if (x === 'value2')
    ...
    [break]

  default:
    ...
    [break]
}

Группировка «case»
  case 3: // (*) группируем оба case
  case 5:
    alert('Неправильно!');
    alert("Может вам посетить урок математики?");
    break;
----------------------------------------------------------------------
Функции
function имя(параметры) {
  ...тело...
}

Выбор имени функции
"get…" – возвращают значение,
"calc…" – что-то вычисляют,
"create…" – что-то создают,
"check…" – что-то проверяют и возвращают логическое значение, и т.д.
----------------------------------------------------------------------
Function Expression
let sayHi = function() {
  alert( "Привет" );
};

Функции-«колбэки»
function ask(question, yes, no) {
  if (confirm(question)) yes()
  else no();
}

function showOk() {
  alert( "Вы согласны." );
}

function showCancel() {
  alert( "Вы отменили выполнение." );
}

// использование: функции showOk, showCancel передаются в качестве аргументов ask
ask("Вы согласны?", showOk, showCancel);

function ask(question, yes, no) {
  if (confirm(question)) yes()
  else no();
}

ask(
  "Вы согласны?",
  function() { alert("Вы согласились."); },
  function() { alert("Вы отменили выполнение."); }
);
Если функция объявлена как отдельная инструкция в основном потоке кода, то это Function Declaration.
Если функция была создана как часть выражения, то считается, что эта функция объявлена при помощи Function Expression.
Function Declaration обрабатываются перед выполнением блока кода. Они видны во всём блоке.
Функции, объявленные при помощи Function Expression, создаются, только когда поток выполнения достигает их.
----------------------------------------------------------------------
Функции-стрелки, основы
let func = (arg1, arg2, ...argN) => expression
// это тоже самое что 
let func = function(arg1, arg2, ...argN) {
  return expression;
};

Многострочные стрелочные функции
let sum = (a, b) => {  // фигурная скобка, открывающая тело многострочной функции
  let result = a + b;
  return result; // при фигурных скобках для возврата значения нужно явно вызвать return
};

alert( sum(1, 2) ); // 3
----------------------------------------------------------------------
Качество кода


Команда Debugger
Выполнение кода можно также приостановить с помощью команды debugger 
прямо изнутри самого кода

Логирование
Если нужно что-то вывести в консоль из кода, применяется функция 
console.log
----------------------------------------------------------------------
Объекты: основы



